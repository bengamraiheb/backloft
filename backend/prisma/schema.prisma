
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String
  avatar            String?
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  refreshToken      String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  assignedTasks     Task[]    @relation("AssignedTo")
  createdTasks      Task[]    @relation("CreatedBy")
  comments          Comment[]
  notifications     Notification[]
}

enum Role {
  ADMIN
  TEAM_MEMBER
  USER
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      Status    @default(TODO)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignee    User?     @relation("AssignedTo", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User      @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String
  comments    Comment[]
  history     TaskHistory[]
  notifications Notification[]
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model TaskHistory {
  id            String   @id @default(uuid())
  taskId        String
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  changeType    String   // e.g., "status_change", "assignee_change", "description_update"
  oldValue      String?
  newValue      String?
  timestamp     DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)
  taskId      String?
}
